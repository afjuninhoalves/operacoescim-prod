<!DOCTYPE html>
<html lang="pt-br">

<head>
  <meta charset="UTF-8" />
  <title>
    <%= (mode==='edit' ? 'Editar' : 'Novo' ) %> usuário
  </title>
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <style>
    :root {
      --bg: #0b1220;
      --panel: #0f172a;
      --panel-2: #111827;
      --border: #1f2937;
      --muted: #94a3b8;
      --text: #e5e7eb;
      --brand: #60a5fa;
      --blue: #2563eb;
      --green: #22c55e;
      --red: #ef4444;
      --shadow: 0 10px 30px rgba(0, 0, 0, .35);
      --radius: 14px;
      --gap: 22px;
      --field: #0b1325;
    }

    * {
      box-sizing: border-box
    }

    html,
    body {
      margin: 0;
      padding: 0;
      background: var(--bg);
      color: var(--text);
      font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, 'Helvetica Neue', Arial
    }

    a {
      color: inherit;
      text-decoration: none
    }

    button {
      font: inherit;
      cursor: pointer
    }

    /* topbar */
    .topbar {
      position: sticky;
      top: 0;
      z-index: 10;
      backdrop-filter: saturate(140%) blur(8px);
      background: linear-gradient(to bottom, rgba(17, 24, 39, .86), rgba(17, 24, 39, .70));
      border-bottom: 1px solid var(--border)
    }

    .topbar-inner {
      max-width: 1100px;
      margin: 0 auto;
      padding: 14px 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      gap: 16px
    }

    .brand {
      display: flex;
      align-items: center;
      gap: 10px;
      font-weight: 700
    }

    .brand-badge {
      display: inline-grid;
      place-items: center;
      width: 30px;
      height: 30px;
      border-radius: 10px;
      background: linear-gradient(135deg, var(--blue), #0ea5e9);
      color: #fff;
      font-weight: 900;
      box-shadow: 0 6px 16px rgba(37, 99, 235, .35)
    }

    /* layout */
    .container {
      max-width: 900px;
      margin: 0 auto;
      padding: 28px 20px 56px
    }

    .title {
      font-size: 28px;
      margin: 0 0 18px
    }

    .card {
      background: linear-gradient(180deg, var(--panel), var(--panel-2));
      border: 1px solid var(--border);
      border-radius: var(--radius);
      box-shadow: var(--shadow);
      padding: 22px
    }

    .muted {
      color: var(--muted)
    }

    .hr {
      height: 1px;
      background: var(--border);
      margin: 16px 0
    }

    /* form */
    .form-grid {
      display: grid;
      gap: 14px;
      grid-template-columns: 1fr
    }

    @media(min-width:760px) {
      .form-grid.two {
        grid-template-columns: 1fr 1fr
      }
    }

    label {
      font-size: 13px;
      color: var(--muted);
      display: block;
      margin: 0 0 6px
    }

    input[type="text"],
    input[type="password"],
    select {
      width: 100%;
      padding: 12px;
      border-radius: 10px;
      border: 1px solid var(--border);
      background: var(--field);
      color: var(--text);
      outline: none
    }

    .field {
      position: relative
    }

    .suffix {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      font-size: 13px;
      color: var(--muted)
    }

    .btn {
      display: inline-flex;
      align-items: center;
      gap: 8px;
      padding: 10px 14px;
      border-radius: 10px;
      border: 1px solid var(--border);
      background: var(--panel);
      color: var(--text)
    }

    .btn:hover {
      filter: brightness(1.08)
    }

    .btn-blue {
      background: var(--blue);
      border-color: rgba(37, 99, 235, .6);
      color: #fff
    }

    .btn-ghost {
      background: transparent
    }

    .btn-danger {
      background: var(--red);
      border-color: rgba(239, 68, 68, .5);
      color: #fff
    }

    .btn-green {
      background: var(--green);
      border-color: rgba(34, 197, 94, .5);
      color: #0b2b12
    }

    .actions {
      display: flex;
      gap: 10px;
      justify-content: flex-end;
      margin-top: 12px
    }

    .alert {
      background: #2a0e10;
      border: 1px solid rgba(239, 68, 68, .35);
      color: #fecaca;
      padding: 12px 14px;
      border-radius: 12px;
      margin: 0 0 14px
    }

    .alert ul {
      margin: 6px 0 0 18px
    }

    /* password helper */
    .pw-tools {
      display: flex;
      gap: 10px;
      align-items: center;
      margin-top: 8px
    }

    .pw-meter {
      height: 6px;
      border-radius: 999px;
      background: #1f2937;
      overflow: hidden
    }

    .pw-meter>span {
      display: block;
      height: 6px;
      width: 0;
      background: var(--red);
      transition: width .25s ease, background .25s ease
    }

    .help {
      font-size: 12px;
      color: var(--muted);
      margin-top: 4px
    }
  </style>
</head>

<body>

  <!-- TOPBAR -->
  <div class="topbar">
    <div class="topbar-inner">
      <div class="brand">
        <span class="brand-badge">C</span>
        <div>
          Operações CIM
          <div class="muted">
            <%= (mode==='edit' ? 'Editar usuário' : 'Novo usuário' ) %>
          </div>
        </div>
      </div>
      <div>
        <a class="btn" href="/admin/usuarios">Voltar</a>
      </div>
    </div>
  </div>

  <div class="container">

    <h1 class="title">
      <%= (mode==='edit' ? 'Editar usuário' : 'Novo usuário' ) %>
    </h1>

    <div class="card">

      <% if (errors && errors.length) { %>
        <div class="alert">
          <strong>Corrija os campos abaixo:</strong>
          <ul>
            <% errors.forEach(e=> { %><li>
                <%= e %>
              </li>
              <% }) %>
          </ul>
        </div>
        <% } %>

          <form method="post" action="<%= (mode === 'edit')
          ? ('/admin/usuarios/' + values.id + '/editar')
          : '/admin/usuarios/novo' %>">
            <input type="hidden" name="_csrf" value="<%= csrfToken %>">

            <div class="form-grid two">
              <div class="field">
                <label>Nome</label>
                <input type="text" name="nome" value="<%= values.nome || '' %>" autocomplete="name" required>
              </div>

              <div class="field">
                <label>CPF</label>
                <input id="cpf" type="text" name="cpf" value="<%= values.cpf || '' %>" placeholder="Somente números"
                  maxlength="14" inputmode="numeric" required>
              </div>

              <div class="field">
                <label>Email (opcional)</label>
                <input type="text" name="email" value="<%= values.email || '' %>" autocomplete="email"
                  placeholder="ex.: joao@exemplo.com">
              </div>

              <div class="field">
                <label>Perfil</label>
                <select name="role" required>
                  <option value="admin" <%=(values.role==='admin' ?'selected':'') %> >admin</option>
                  <option value="gestor" <%=(values.role==='gestor' ?'selected':'') %> >gestor</option>
                  <option value="operador" <%=(values.role==='operador' || !values.role ? 'selected' :'') %> >operador
                  </option>
                  <option value="auditor" <%=(values.role==='auditor' ?'selected':'') %> >auditor</option>
                </select>

              </div>

              <div class="field">
                <label>Cidade</label>
                <select name="cidade_id" required>
                  <% (cidades || []).forEach(c=> { %>
                    <option value="<%= c.id %>" <%=(Number(values.cidade_id)===Number(c.id)?'selected':'') %>>
                      <%= c.nome %>
                    </option>
                    <% }) %>
                </select>
              </div>

              <div class="field">
                <label>Senha <%= (mode==='edit' ? '(deixe em branco para manter)' : '(requerida)' ) %></label>
                <input id="senha" type="password" name="senha"
                  placeholder="<%= (mode==='edit' ? 'Nova senha (opcional)' : 'Min 10, maiúscula, minúscula, número e especial') %>">
                <div class="pw-tools">
                  <button type="button" class="btn btn-ghost" id="togglePw">Mostrar</button>
                  <button type="button" class="btn btn-green" id="genPw">Gerar senha forte</button>
                  <div class="pw-meter" style="flex:1"><span id="pwBar"></span></div>
                </div>
                <div class="help">Use pelo menos 10 caracteres com letras maiúsculas/minúsculas, números e símbolo.
                </div>
              </div>
            </div>

            <div class="actions">
              <a class="btn" href="/admin/usuarios">Cancelar</a>
              <button class="btn btn-blue" type="submit">
                <%= (mode==='edit' ? 'Salvar' : 'Criar' ) %>
              </button>
            </div>
          </form>
    </div>
  </div>

  <script>
    // CPF: mantém apenas dígitos (máscara leve)
    (function () {
      const cpf = document.getElementById('cpf');
      if (!cpf) return;
      cpf.addEventListener('input', () => {
        cpf.value = cpf.value.replace(/\D/g, '').slice(0, 11);
      });
    })();

    // Mostrar/ocultar senha + gerar senha + barra de força
    (function () {
      const input = document.getElementById('senha');
      const toggle = document.getElementById('togglePw');
      const gen = document.getElementById('genPw');
      const bar = document.getElementById('pwBar');

      function strength(s) {
        if (!s) return 0;
        let score = 0;
        if (s.length >= 10) score++;
        if (/[a-z]/.test(s)) score++;
        if (/[A-Z]/.test(s)) score++;
        if (/\d/.test(s)) score++;
        if (/[^A-Za-z0-9]/.test(s)) score++;
        return Math.min(score, 5);
      }

      function renderMeter() {
        const sc = strength(input.value);
        const pct = (sc / 5) * 100;
        bar.style.width = pct + '%';
        bar.style.background = sc < 3 ? '#ef4444' : (sc === 3 ? '#f59e0b' : '#22c55e');
      }

      if (toggle) {
        toggle.addEventListener('click', () => {
          input.type = (input.type === 'password' ? 'text' : 'password');
          toggle.textContent = (input.type === 'password' ? 'Mostrar' : 'Ocultar');
        });
      }

      if (gen) {
        gen.addEventListener('click', () => {
          const chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz23456789!@#$%&*?';
          let s = '';
          for (let i = 0; i < 16; i++) s += chars[Math.floor(Math.random() * chars.length)];
          input.value = s;
          renderMeter();
          try { input.focus(); input.select(); document.execCommand('copy'); } catch (e) { }
        });
      }

      if (input) input.addEventListener('input', renderMeter);
      renderMeter();
    })();
  </script>
</body>

</html>